name: Static Resource Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Select the target environment for deployment'
        required: true
        type: choice
        options:
          - 'int'
          - 'qa'
          - 'training'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Set Resource Name
        run: |
          echo "RESOURCE_NAME=MyStaticResource" >> $GITHUB_ENV
        shell: bash

      - name: Checkout the main branch
        uses: actions/checkout@v4
        with:
          ref: 'main'
          path: 'app'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify existence of target application file
        id: verify_target_file
        run: |
          TARGET_APP_FILE_PATH="${GITHUB_WORKSPACE}/app/${{ github.event.inputs.target_environment }}.zip"
          if [ ! -f "$TARGET_APP_FILE_PATH" ]; then
            echo "::error file=$TARGET_APP_FILE_PATH::Error: The target application file does not exist."
            exit 1
          fi
        shell: bash

      - name: Current Month
        id: current_month
        run: |
          echo "CURRENT_MONTH=$(date +'%Y-%m')" >> $GITHUB_ENV
        shell: bash

      - name: Cache Salesforce CLI
        id: cache-sf-cli
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/sf-cli
          key: ${{ runner.os }}-sf-cli-${{ env.CURRENT_MONTH }}
          restore-keys: |
            ${{ runner.os }}-sf-cli-${{ env.CURRENT_MONTH }}

      - name: Install Salesforce CLI
        if: steps.cache-sf-cli.outputs.cache-hit != 'true'
        run: |
          echo "Starting installation of Salesforce CLI..."
          
          SALESFORCE_CLI_INSTALL_DIR="${GITHUB_WORKSPACE}/sf-cli"
          mkdir -p $SALESFORCE_CLI_INSTALL_DIR

          SALESFORCE_CLI_DOWNLOAD_URL="https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz"
          curl -L $SALESFORCE_CLI_DOWNLOAD_URL | tar -xJf - -C $SALESFORCE_CLI_INSTALL_DIR

          if [ -f "$SALESFORCE_CLI_INSTALL_DIR/sf/bin/sf" ]; then
            echo "Salesforce CLI installed successfully in $SALESFORCE_CLI_INSTALL_DIR."
          else
            echo "::error::Salesforce CLI installation failed or directory structure is incorrect."
            exit 1
          fi
        shell: bash

      - name: Add Salesforce CLI to PATH
        run: |
          echo "$GITHUB_WORKSPACE/sf-cli/sf/bin" >> $GITHUB_PATH
        shell: bash

      - name: Display Salesforce CLI version
        if: steps.verify_target_file.outcome == 'success'
        run: |
          sf version
        shell: bash

      - name: Generate placeholder Salesforce project
        id: generate_sf_project
        if: steps.verify_target_file.outcome == 'success'
        run: |
          # This is needed as you may only execute project deployments from within a SF directory.
          # This approach of using a placeholder project rather than the actual repository
          # saves approximately 3 minutes of execution cost time thereby saving money.
          sf project generate --name salesforce --template empty --output-dir $GITHUB_WORKSPACE
        shell: bash

      - name: Generate the deployment package manifest
        id: generate_manifest_file
        if: steps.generate_sf_project.outcome == 'success'
        run: |
          mkdir -p $GITHUB_WORKSPACE/salesforce/manifest
          cat <<EOF > $GITHUB_WORKSPACE/salesforce/manifest/package.xml
          <Package xmlns="http://soap.sforce.com/2006/04/metadata">
            <types>
              <members>${{ env.RESOURCE_NAME }}</members>
              <name>StaticResource</name>
            </types>
            <version>59.0</version>
          </Package>
          EOF

          if [ ! -f "$GITHUB_WORKSPACE/salesforce/manifest/package.xml" ]; then
            echo "::error file=$GITHUB_WORKSPACE/salesforce/manifest/package.xml::Error: The manifest file does not exist."
            exit 1
          fi
        shell: bash

      - name: Make Static Resource Folder Structure
        id: make_static_resource_folder
        if: steps.generate_manifest_file.outcome == 'success'
        run: |
          mkdir -p $GITHUB_WORKSPACE/salesforce/force-app/main/default/staticresources

          if [ ! -d "$GITHUB_WORKSPACE/salesforce/force-app/main/default/staticresources" ]; then
            echo "::error directory=$GITHUB_WORKSPACE/salesforce/force-app/main/default/staticresources::Error: The static resource folder does not exist."
            exit 1
          fi

          # temp debug:
          cat $GITHUB_WORKSPACE/salesforce/manifest/package.xml
        shell: bash

      - name: Extract target application file
        id: extract_target_file
        if: steps.make_static_resource_folder.outcome == 'success'
        run: |
          tar -xzf ${{ github.event.inputs.target_environment }}.zip -C $GITHUB_WORKSPACE/salesforce/force-app/main/default/staticresources/${{ env.RESOURCE_NAME }}
        shell: bash

      - name: Handle custom target application file metadata
        if: steps.extract_target_file.outcome == 'success'
        run: |
          if [ -f "$GITHUB_WORKSPACE/salesforce/force-app/main/default/staticresources/${{ env.RESOURCE_NAME }}/_METADATA" ]; then
            mv $GITHUB_WORKSPACE/salesforce/force-app/main/default/staticresources/${{ env.RESOURCE_NAME }}/_METADATA /tmp/METADATA
            DESCRIPTION=$(grep -oP '<description>\K.*(?=</description>)' /tmp/METADATA)
          fi

          if [ -z "$DESCRIPTION" ]; then
            DESCRIPTION="${{ env.RESOURCE_NAME }} - $(date +'%Y-%m-%d')"
          fi

          echo "The ${{ env.RESOURCE_NAME }} resource description is: ${ DESCRIPTION }"

          cat <<EOF > $GITHUB_WORKSPACE/salesforce/force-app/main/default/staticresources/${{ env.RESOURCE_NAME }}.resource-meta.xml
          <StaticResource xmlns="http://soap.sforce.com/2006/04/metadata">
            <cacheControl>Public</cacheControl>
            <contentType>application/x-zip-compressed</contentType>
            <description>${ DESCRIPTION }</description>
          </StaticResource>
          EOF
        shell: bash

      - name: Debug manifest file
        if: steps.generate_manifest_file.outcome == 'success'
        run: |
          cat $GITHUB_WORKSPACE/salesforce/manifest/package.xml
        shell: bash
name: Static Resource Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Select the target environment for deployment'
        required: true
        type: choice
        options:
          - 'int'
          - 'qa'
          - 'training'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Prepare job variables & structure
        run: |
          echo "Setting job variables..."
          echo "RESOURCE_NAME=MyStaticResource" >> $GITHUB_ENV
          echo "SALESFORCE_CLI_DOWNLOAD_URL=https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz" >> $GITHUB_ENV
          echo "CURRENT_MONTH=$(date +'%Y-%m')" >> $GITHUB_ENV
          echo "STATIC_RESOURCE_DIR=$GITHUB_WORKSPACE/salesforce/force-app/main/default/staticresources" >> $GITHUB_ENV

          echo "Creating directories..."
          mkdir -p $GITHUB_WORKSPACE/sf-cli
        shell: bash

      - name: Checkout the main branch
        uses: actions/checkout@v4
        with:
          ref: 'main'
          path: 'app'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify existence of target application file
        id: verify_target_file
        run: |
          TARGET_APP_FILE_PATH="${GITHUB_WORKSPACE}/app/${{ github.event.inputs.target_environment }}.zip"
          if [ ! -f "$TARGET_APP_FILE_PATH" ]; then
            echo "::error file=$TARGET_APP_FILE_PATH::Error: The target application file does not exist."
            exit 1
          fi
        shell: bash

      - name: Cache Salesforce CLI
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/sf-cli
          key: ${{ runner.os }}-sf-cli-2024-07  # TEMP TO TEST CACHE DELETION
          restore-keys: |
            ${{ runner.os }}-sf-cli-2024-07

      - name: Install Salesforce CLI
        if: steps.cache.outputs.cache-hit != 'true'
        run: curl -L $SALESFORCE_CLI_DOWNLOAD_URL | tar -xJf - -C $GITHUB_WORKSPACE/sf-cli

      - name: Add Salesforce CLI to PATH
        id: add_sf_to_path
        run: |
          if [ -f "${GITHUB_WORKSPACE}/sf-cli/sf/bin/sf" ]; then
            echo "Salesforce CLI installed successfully in ${GITHUB_WORKSPACE}/sf-cli."
          else
            echo "::error::Salesforce CLI installation failed or directory structure is incorrect."
            exit 1
          fi

          echo "$GITHUB_WORKSPACE/sf-cli/sf/bin" >> $GITHUB_PATH
        shell: bash

      - name: Display Salesforce CLI version
        if: steps.verify_target_file.outcome == 'success'
        run: |
          sf version
        shell: bash

      - name: Generate placeholder Salesforce project
        id: generate_sf_project
        if: steps.verify_target_file.outcome == 'success'
        run: |
          # This is needed as you may only execute project deployments from within a SF directory.
          # This approach of using a placeholder project rather than the actual repository
          # saves approximately 3 minutes of execution cost time thereby saving money.
          sf project generate --name salesforce --template empty --output-dir $GITHUB_WORKSPACE
        shell: bash

      - name: Make Static Resource Folder Structure
        id: make_static_resource_folder
        if: steps.generate_sf_project.outcome == 'success'
        run: |
          mkdir -p ${{ env.STATIC_RESOURCE_DIR }}

          if [ ! -d "${{ env.STATIC_RESOURCE_DIR }}" ]; then
            echo "::error directory=${{ env.STATIC_RESOURCE_DIR }}::staticresources::Error: The static resource folder does not exist."
            exit 1
          fi
        shell: bash

      - name: Extract target application file
        id: extract_target_file
        if: steps.make_static_resource_folder.outcome == 'success'
        run: |
          unzip $GITHUB_WORKSPACE/app/${{ github.event.inputs.target_environment }}.zip -d ${{ env.STATIC_RESOURCE_DIR }}/${{ env.RESOURCE_NAME }}
        shell: bash

      - name: Static Resource Description & Metadata
        if: steps.extract_target_file.outcome == 'success'
        run: |
          if [ -f "${{ env.STATIC_RESOURCE_DIR }}/${{ env.RESOURCE_NAME }}/_METADATA" ]; then
            mv ${{ env.STATIC_RESOURCE_DIR }}/${{ env.RESOURCE_NAME }}/_METADATA /tmp/METADATA
            DESCRIPTION=$(grep -oP '<description>\K.*(?=</description>)' /tmp/METADATA)
          fi

          if [ -z "$DESCRIPTION" ]; then
            DESCRIPTION="${{ env.RESOURCE_NAME }} - $(date +'%Y-%m-%d') - ${{ github.run_id }}"
          fi

          echo "The ${{ env.RESOURCE_NAME }} resource description is: $DESCRIPTION"

          cat <<EOF > ${{ env.STATIC_RESOURCE_DIR }}/${{ env.RESOURCE_NAME }}.resource-meta.xml
          <StaticResource xmlns="http://soap.sforce.com/2006/04/metadata">
            <cacheControl>Public</cacheControl>
            <contentType>application/x-zip-compressed</contentType>
            <description>$DESCRIPTION</description>
          </StaticResource>
          EOF
        shell: bash

      - name: Authenticate to Salesforce
        id: sf_authenticate
        if: steps.add_sf_to_path.outcome == 'success'
        env:
          AUTH_INT: ${{ secrets.AUTH_INT }}
          AUTH_QA: ${{ secrets.AUTH_QA }}
          AUTH_TRAINING: ${{ secrets.AUTH_TRAINING }}
        run: |
          target_env="${{ github.event.inputs.target_environment }}"

          declare -A auth_secrets=(
            [int]=$AUTH_INT
            [qa]=$AUTH_QA
            [training]=$AUTH_TRAINING
          )
      
          if [[ -z "${auth_secrets[$target_env]}" ]]; then
            echo "::error::Invalid target environment: $target_env"
            exit 1
          fi

          echo "${auth_secrets[$target_env]}" | sf org login sfdx-url --sfdx-url-stdin --set-default --alias "$target_env"
        shell: bash

      - name: Check Resource Deployability
        id: check_resource_deployability
        if: steps.sf_authenticate.outcome == 'success'
        run: |
          cd $GITHUB_WORKSPACE/salesforce
          sf project deploy start --dry-run --source-dir ${{ env.STATIC_RESOURCE_DIR }}/${{ env.RESOURCE_NAME }} --target-org ${{ github.event.inputs.target_environment }} --verbose 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | tee $GITHUB_WORKSPACE/deployment_check.log || true
        shell: bash

      - name: Display Deployment Check Log
        id: display_deployment_check_log
        if: steps.check_resource_deployability.outcome == 'success'
        run: |
          # if component failure in log, then print the log and exit
          if grep -q "Component failure" $GITHUB_WORKSPACE/deployment_check.log; then
            cat $GITHUB_WORKSPACE/deployment_check.log
            echo "::error::Deployment check failed."
            exit 1
          fi
        shell: bash

      - name: Deploy Static Resource
        id: deploy_resource
        if: steps.display_deployment_check_log.outcome == 'success'
        run: |
          cd $GITHUB_WORKSPACE/salesforce
          sf project deploy start --source-dir ${{ env.STATIC_RESOURCE_DIR }}/${{ env.RESOURCE_NAME }} --target-org ${{ github.event.inputs.target_environment }} --verbose 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | tee $GITHUB_WORKSPACE/deployment.log || true
        shell: bash

      - name: Upload Deployment Log
        id: upload_deployment_log
        uses: actions/upload-artifact@v4
        if: steps.deploy_resource.outcome == 'success'
        with:
          name: deployment_log
          path: deployment.log
          retention-days: 7
